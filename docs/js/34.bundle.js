(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[34],{

/***/ "../node_modules/monaco-editor/esm/vs/basic-languages/perl/perl.js":
/*!*************************************************************************!*\
  !*** ../node_modules/monaco-editor/esm/vs/basic-languages/perl/perl.js ***!
  \*************************************************************************/
/*! exports provided: conf, language */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conf", function() { return conf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "language", function() { return language; });
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/

var conf = {
    comments: {
        lineComment: '#',
    },
    brackets: [['{', '}'], ['[', ']'], ['(', ')']],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
        { open: '`', close: '`' },
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
        { open: '`', close: '`' },
    ],
};
var language = {
    defaultToken: '',
    tokenPostfix: '.perl',
    brackets: [
        { token: 'delimiter.bracket', open: '{', close: '}' },
        { token: 'delimiter.parenthesis', open: '(', close: ')' },
        { token: 'delimiter.square', open: '[', close: ']' },
    ],
    // https://learn.perl.org/docs/keywords.html
    // Perl syntax
    keywords: [
        '__DATA__',
        'else',
        'lock',
        '__END__',
        'elsif',
        'lt',
        '__FILE__',
        'eq',
        '__LINE__',
        'exp',
        'ne',
        'sub',
        '__PACKAGE__',
        'for',
        'no',
        'and',
        'foreach',
        'or',
        'unless',
        'cmp',
        'ge',
        'package',
        'until',
        'continue',
        'gt',
        'while',
        'CORE',
        'if',
        'xor',
        'do',
        'le',
        '__DIE__',
        '__WARN__',
    ],
    // Perl functions
    builtinFunctions: [
        '-A',
        'END',
        'length',
        'setpgrp',
        '-B',
        'endgrent',
        'link',
        'setpriority',
        '-b',
        'endhostent',
        'listen',
        'setprotoent',
        '-C',
        'endnetent',
        'local',
        'setpwent',
        '-c',
        'endprotoent',
        'localtime',
        'setservent',
        '-d',
        'endpwent',
        'log',
        'setsockopt',
        '-e',
        'endservent',
        'lstat',
        'shift',
        '-f',
        'eof',
        'map',
        'shmctl',
        '-g',
        'eval',
        'mkdir',
        'shmget',
        '-k',
        'exec',
        'msgctl',
        'shmread',
        '-l',
        'exists',
        'msgget',
        'shmwrite',
        '-M',
        'exit',
        'msgrcv',
        'shutdown',
        '-O',
        'fcntl',
        'msgsnd',
        'sin',
        '-o',
        'fileno',
        'my',
        'sleep',
        '-p',
        'flock',
        'next',
        'socket',
        '-r',
        'fork',
        'not',
        'socketpair',
        '-R',
        'format',
        'oct',
        'sort',
        '-S',
        'formline',
        'open',
        'splice',
        '-s',
        'getc',
        'opendir',
        'split',
        '-T',
        'getgrent',
        'ord',
        'sprintf',
        '-t',
        'getgrgid',
        'our',
        'sqrt',
        '-u',
        'getgrnam',
        'pack',
        'srand',
        '-w',
        'gethostbyaddr',
        'pipe',
        'stat',
        '-W',
        'gethostbyname',
        'pop',
        'state',
        '-X',
        'gethostent',
        'pos',
        'study',
        '-x',
        'getlogin',
        'print',
        'substr',
        '-z',
        'getnetbyaddr',
        'printf',
        'symlink',
        'abs',
        'getnetbyname',
        'prototype',
        'syscall',
        'accept',
        'getnetent',
        'push',
        'sysopen',
        'alarm',
        'getpeername',
        'quotemeta',
        'sysread',
        'atan2',
        'getpgrp',
        'rand',
        'sysseek',
        'AUTOLOAD',
        'getppid',
        'read',
        'system',
        'BEGIN',
        'getpriority',
        'readdir',
        'syswrite',
        'bind',
        'getprotobyname',
        'readline',
        'tell',
        'binmode',
        'getprotobynumber',
        'readlink',
        'telldir',
        'bless',
        'getprotoent',
        'readpipe',
        'tie',
        'break',
        'getpwent',
        'recv',
        'tied',
        'caller',
        'getpwnam',
        'redo',
        'time',
        'chdir',
        'getpwuid',
        'ref',
        'times',
        'CHECK',
        'getservbyname',
        'rename',
        'truncate',
        'chmod',
        'getservbyport',
        'require',
        'uc',
        'chomp',
        'getservent',
        'reset',
        'ucfirst',
        'chop',
        'getsockname',
        'return',
        'umask',
        'chown',
        'getsockopt',
        'reverse',
        'undef',
        'chr',
        'glob',
        'rewinddir',
        'UNITCHECK',
        'chroot',
        'gmtime',
        'rindex',
        'unlink',
        'close',
        'goto',
        'rmdir',
        'unpack',
        'closedir',
        'grep',
        'say',
        'unshift',
        'connect',
        'hex',
        'scalar',
        'untie',
        'cos',
        'index',
        'seek',
        'use',
        'crypt',
        'INIT',
        'seekdir',
        'utime',
        'dbmclose',
        'int',
        'select',
        'values',
        'dbmopen',
        'ioctl',
        'semctl',
        'vec',
        'defined',
        'join',
        'semget',
        'wait',
        'delete',
        'keys',
        'semop',
        'waitpid',
        'DESTROY',
        'kill',
        'send',
        'wantarray',
        'die',
        'last',
        'setgrent',
        'warn',
        'dump',
        'lc',
        'sethostent',
        'write',
        'each',
        'lcfirst',
        'setnetent',
    ],
    // File handlers
    builtinFileHandlers: ['ARGV', 'STDERR', 'STDOUT', 'ARGVOUT', 'STDIN', 'ENV'],
    // Perl variables
    builtinVariables: [
        '$!',
        '$^RE_TRIE_MAXBUF',
        '$LAST_REGEXP_CODE_RESULT',
        '$"',
        '$^S',
        '$LIST_SEPARATOR',
        '$#',
        '$^T',
        '$MATCH',
        '$$',
        '$^TAINT',
        '$MULTILINE_MATCHING',
        '$%',
        '$^UNICODE',
        '$NR',
        '$&',
        '$^UTF8LOCALE',
        '$OFMT',
        "$'",
        '$^V',
        '$OFS',
        '$(',
        '$^W',
        '$ORS',
        '$)',
        '$^WARNING_BITS',
        '$OS_ERROR',
        '$*',
        '$^WIDE_SYSTEM_CALLS',
        '$OSNAME',
        '$+',
        '$^X',
        '$OUTPUT_AUTO_FLUSH',
        '$,',
        '$_',
        '$OUTPUT_FIELD_SEPARATOR',
        '$-',
        '$`',
        '$OUTPUT_RECORD_SEPARATOR',
        '$.',
        '$a',
        '$PERL_VERSION',
        '$/',
        '$ACCUMULATOR',
        '$PERLDB',
        '$0',
        '$ARG',
        '$PID',
        '$:',
        '$ARGV',
        '$POSTMATCH',
        '$;',
        '$b',
        '$PREMATCH',
        '$<',
        '$BASETIME',
        '$PROCESS_ID',
        '$=',
        '$CHILD_ERROR',
        '$PROGRAM_NAME',
        '$>',
        '$COMPILING',
        '$REAL_GROUP_ID',
        '$?',
        '$DEBUGGING',
        '$REAL_USER_ID',
        '$@',
        '$EFFECTIVE_GROUP_ID',
        '$RS',
        '$[',
        '$EFFECTIVE_USER_ID',
        '$SUBSCRIPT_SEPARATOR',
        '$\\',
        '$EGID',
        '$SUBSEP',
        '$]',
        '$ERRNO',
        '$SYSTEM_FD_MAX',
        '$^',
        '$EUID',
        '$UID',
        '$^A',
        '$EVAL_ERROR',
        '$WARNING',
        '$^C',
        '$EXCEPTIONS_BEING_CAUGHT',
        '$|',
        '$^CHILD_ERROR_NATIVE',
        '$EXECUTABLE_NAME',
        '$~',
        '$^D',
        '$EXTENDED_OS_ERROR',
        '%!',
        '$^E',
        '$FORMAT_FORMFEED',
        '%^H',
        '$^ENCODING',
        '$FORMAT_LINE_BREAK_CHARACTERS',
        '%ENV',
        '$^F',
        '$FORMAT_LINES_LEFT',
        '%INC',
        '$^H',
        '$FORMAT_LINES_PER_PAGE',
        '%OVERLOAD',
        '$^I',
        '$FORMAT_NAME',
        '%SIG',
        '$^L',
        '$FORMAT_PAGE_NUMBER',
        '@+',
        '$^M',
        '$FORMAT_TOP_NAME',
        '@-',
        '$^N',
        '$GID',
        '@_',
        '$^O',
        '$INPLACE_EDIT',
        '@ARGV',
        '$^OPEN',
        '$INPUT_LINE_NUMBER',
        '@INC',
        '$^P',
        '$INPUT_RECORD_SEPARATOR',
        '@LAST_MATCH_START',
        '$^R',
        '$LAST_MATCH_END',
        '$^RE_DEBUG_FLAGS',
        '$LAST_PAREN_MATCH',
    ],
    // operators
    symbols: /[:+\-\^*$&%@=<>!?|\/~\.]/,
    quoteLikeOps: ['qr', 'm', 's', 'q', 'qq', 'qx', 'qw', 'tr', 'y'],
    escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
    // The main tokenizer for our languages
    tokenizer: {
        root: [
            { include: '@whitespace' },
            [
                /[a-zA-Z\-_][\w\-_]*/,
                {
                    cases: {
                        '@keywords': 'keyword',
                        '@builtinFunctions': 'type.identifier',
                        '@builtinFileHandlers': 'variable.predefined',
                        '@quoteLikeOps': { token: '@rematch', next: 'quotedConstructs' },
                        '@default': '',
                    },
                },
            ],
            // Perl variables
            [
                /[\$@%][*@#?\+\-\$!\w\\\^><~:;\.]+/,
                {
                    cases: {
                        '@builtinVariables': 'variable.predefined',
                        '@default': 'variable',
                    },
                },
            ],
            { include: '@strings' },
            { include: '@dblStrings' },
            // Perl Doc
            { include: '@perldoc' },
            // Here Doc
            { include: '@heredoc' },
            [/[{}\[\]()]/, '@brackets'],
            // RegExp
            [
                /[\/](?:(?:\[(?:\\]|[^\]])+\])|(?:\\\/|[^\]\/]))*[\/]\w*\s*(?=[).,;]|$)/,
                'regexp',
            ],
            [/@symbols/, 'operators'],
            { include: '@numbers' },
            [/[,;]/, 'delimiter'],
        ],
        whitespace: [
            [/\s+/, 'white'],
            [/(^#!.*$)/, 'metatag'],
            [/(^#.*$)/, 'comment'],
        ],
        numbers: [
            [/\d*\.\d+([eE][\-+]?\d+)?/, 'number.float'],
            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],
            [/\d+/, 'number'],
        ],
        // Single quote string
        strings: [[/'/, 'string', '@stringBody']],
        stringBody: [
            [/'/, 'string', '@popall'],
            [/\\'/, 'string.escape'],
            [/./, 'string'],
        ],
        // Double quote string
        dblStrings: [[/"/, 'string', '@dblStringBody']],
        dblStringBody: [
            [/"/, 'string', '@popall'],
            [/@escapes/, 'string.escape'],
            [/\\./, 'string.escape.invalid'],
            { include: '@variables' },
            [/./, 'string'],
        ],
        // Quoted constructs
        // Percent strings in Ruby are similar to quote-like operators in Perl.
        // This is adapted from pstrings in ../ruby/ruby.ts.
        quotedConstructs: [
            [/(q|qw|tr|y)\s*\(/, { token: 'string.delim', switchTo: '@qstring.(.)' }],
            [/(q|qw|tr|y)\s*\[/, { token: 'string.delim', switchTo: '@qstring.[.]' }],
            [/(q|qw|tr|y)\s*\{/, { token: 'string.delim', switchTo: '@qstring.{.}' }],
            [/(q|qw|tr|y)\s*</, { token: 'string.delim', switchTo: '@qstring.<.>' }],
            [/(q|qw|tr|y)#/, { token: 'string.delim', switchTo: '@qstring.#.#' }],
            [/(q|qw|tr|y)\s*([^A-Za-z0-9#\s])/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],
            [/(q|qw|tr|y)\s+(\w)/, { token: 'string.delim', switchTo: '@qstring.$2.$2' }],
            [/(qr|m|s)\s*\(/, { token: 'regexp.delim', switchTo: '@qregexp.(.)' }],
            [/(qr|m|s)\s*\[/, { token: 'regexp.delim', switchTo: '@qregexp.[.]' }],
            [/(qr|m|s)\s*\{/, { token: 'regexp.delim', switchTo: '@qregexp.{.}' }],
            [/(qr|m|s)\s*</, { token: 'regexp.delim', switchTo: '@qregexp.<.>' }],
            [/(qr|m|s)#/, { token: 'regexp.delim', switchTo: '@qregexp.#.#' }],
            [/(qr|m|s)\s*([^A-Za-z0-9_#\s])/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],
            [/(qr|m|s)\s+(\w)/, { token: 'regexp.delim', switchTo: '@qregexp.$2.$2' }],
            [/(qq|qx)\s*\(/, { token: 'string.delim', switchTo: '@qqstring.(.)' }],
            [/(qq|qx)\s*\[/, { token: 'string.delim', switchTo: '@qqstring.[.]' }],
            [/(qq|qx)\s*\{/, { token: 'string.delim', switchTo: '@qqstring.{.}' }],
            [/(qq|qx)\s*</, { token: 'string.delim', switchTo: '@qqstring.<.>' }],
            [/(qq|qx)#/, { token: 'string.delim', switchTo: '@qqstring.#.#' }],
            [/(qq|qx)\s*([^A-Za-z0-9#\s])/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }],
            [/(qq|qx)\s+(\w)/, { token: 'string.delim', switchTo: '@qqstring.$2.$2' }],
        ],
        // Non-expanded quoted string
        // qstring<open>.<close>
        //  open = open delimiter
        //  close = close delimiter
        qstring: [
            [/\\./, 'string.escape'],
            [/./, {
                    cases: {
                        '$#==$S3': { token: 'string.delim', next: '@pop' },
                        '$#==$S2': { token: 'string.delim', next: '@push' },
                        '@default': 'string'
                    }
                }],
        ],
        // Quoted regexp
        // qregexp.<open>.<close>
        //  open = open delimiter
        //  close = close delimiter
        qregexp: [
            { include: '@variables' },
            [/\\./, 'regexp.escape'],
            [/./, {
                    cases: {
                        '$#==$S3': { token: 'regexp.delim', next: '@regexpModifiers' },
                        '$#==$S2': { token: 'regexp.delim', next: '@push' },
                        '@default': 'regexp'
                    }
                }],
        ],
        regexpModifiers: [
            [/[msixpodualngcer]+/, { token: 'regexp.modifier', next: '@popall' }],
        ],
        // Expanded quoted string
        // qqstring.<open>.<close>
        //  open = open delimiter
        //  close = close delimiter
        qqstring: [
            { include: '@variables' },
            { include: '@qstring' },
        ],
        heredoc: [
            [
                /<<\s*['"`]?([\w\-]+)['"`]?/,
                { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' },
            ],
        ],
        heredocBody: [
            [
                /^([\w\-]+)$/,
                {
                    cases: {
                        '$1==$S2': [{ token: 'string.heredoc.delimiter', next: '@popall' }],
                        '@default': 'string.heredoc',
                    },
                },
            ],
            [/./, 'string.heredoc'],
        ],
        perldoc: [[/^=\w/, 'comment.doc', '@perldocBody']],
        perldocBody: [
            [/^=cut\b/, 'type.identifier', '@popall'],
            [/./, 'comment.doc'],
        ],
        variables: [
            [/\$\w+/, 'variable'],
            [/@\w+/, 'variable'],
            [/%\w+/, 'variable'],
        ],
    },
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2ljLWxhbmd1YWdlcy9wZXJsL3BlcmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7QUFDTjtBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsa0JBQWtCLEtBQUs7QUFDdkI7QUFDQSxTQUFTLFNBQVMsWUFBWSxHQUFHO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDO0FBQ0E7QUFDQSxTQUFTLFNBQVMsWUFBWSxHQUFHO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVMscUNBQXFDLFlBQVksR0FBRztBQUM3RCxTQUFTLHdEQUF3RDtBQUNqRSxTQUFTLG1EQUFtRDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxJQUFJLGNBQWMsRUFBRSxjQUFjLEVBQUU7QUFDbEY7QUFDQTtBQUNBO0FBQ0EsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsOENBQThDO0FBQ3hGO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYSxzQkFBc0I7QUFDbkMsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQztBQUNBLGFBQWEsc0JBQXNCO0FBQ25DLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsbUZBQW1GO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdCQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msa0RBQWtEO0FBQ3BGLGtDQUFrQyxrREFBa0Q7QUFDcEYsOEJBQThCLElBQUksNkNBQTZDLEVBQUUsR0FBRztBQUNwRixpQ0FBaUMsa0RBQWtEO0FBQ25GLDhCQUE4QixrREFBa0Q7QUFDaEYsaURBQWlELG9EQUFvRDtBQUNyRyxvQ0FBb0Msb0RBQW9EO0FBQ3hGLCtCQUErQixrREFBa0Q7QUFDakYsK0JBQStCLGtEQUFrRDtBQUNqRiwyQkFBMkIsSUFBSSw2Q0FBNkMsRUFBRSxHQUFHO0FBQ2pGLDhCQUE4QixrREFBa0Q7QUFDaEYsMkJBQTJCLGtEQUFrRDtBQUM3RSwrQ0FBK0Msb0RBQW9EO0FBQ25HLGlDQUFpQyxvREFBb0Q7QUFDckYsOEJBQThCLG1EQUFtRDtBQUNqRiw4QkFBOEIsbURBQW1EO0FBQ2pGLDBCQUEwQixJQUFJLDhDQUE4QyxFQUFFLEdBQUc7QUFDakYsNkJBQTZCLG1EQUFtRDtBQUNoRiwwQkFBMEIsbURBQW1EO0FBQzdFLDZDQUE2QyxxREFBcUQ7QUFDbEcsZ0NBQWdDLHFEQUFxRDtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msc0NBQXNDO0FBQzFFLG9DQUFvQyx1Q0FBdUM7QUFDM0U7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdCQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msa0RBQWtEO0FBQ3RGLG9DQUFvQyx1Q0FBdUM7QUFDM0U7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0Esb0NBQW9DLDRDQUE0QztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdCQUF3QjtBQUNyQyxhQUFhLHNCQUFzQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2REFBNkQ7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMscURBQXFEO0FBQzFGO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsImZpbGUiOiJqcy8zNC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5leHBvcnQgdmFyIGNvbmYgPSB7XHJcbiAgICBjb21tZW50czoge1xyXG4gICAgICAgIGxpbmVDb21tZW50OiAnIycsXHJcbiAgICB9LFxyXG4gICAgYnJhY2tldHM6IFtbJ3snLCAnfSddLCBbJ1snLCAnXSddLCBbJygnLCAnKSddXSxcclxuICAgIGF1dG9DbG9zaW5nUGFpcnM6IFtcclxuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcclxuICAgICAgICB7IG9wZW46ICdcIicsIGNsb3NlOiAnXCInIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnYCcsIGNsb3NlOiAnYCcgfSxcclxuICAgIF0sXHJcbiAgICBzdXJyb3VuZGluZ1BhaXJzOiBbXHJcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcclxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxyXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnXCInLCBjbG9zZTogJ1wiJyB9LFxyXG4gICAgICAgIHsgb3BlbjogXCInXCIsIGNsb3NlOiBcIidcIiB9LFxyXG4gICAgICAgIHsgb3BlbjogJ2AnLCBjbG9zZTogJ2AnIH0sXHJcbiAgICBdLFxyXG59O1xyXG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xyXG4gICAgZGVmYXVsdFRva2VuOiAnJyxcclxuICAgIHRva2VuUG9zdGZpeDogJy5wZXJsJyxcclxuICAgIGJyYWNrZXRzOiBbXHJcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5icmFja2V0Jywgb3BlbjogJ3snLCBjbG9zZTogJ30nIH0sXHJcbiAgICAgICAgeyB0b2tlbjogJ2RlbGltaXRlci5wYXJlbnRoZXNpcycsIG9wZW46ICcoJywgY2xvc2U6ICcpJyB9LFxyXG4gICAgICAgIHsgdG9rZW46ICdkZWxpbWl0ZXIuc3F1YXJlJywgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICBdLFxyXG4gICAgLy8gaHR0cHM6Ly9sZWFybi5wZXJsLm9yZy9kb2NzL2tleXdvcmRzLmh0bWxcclxuICAgIC8vIFBlcmwgc3ludGF4XHJcbiAgICBrZXl3b3JkczogW1xyXG4gICAgICAgICdfX0RBVEFfXycsXHJcbiAgICAgICAgJ2Vsc2UnLFxyXG4gICAgICAgICdsb2NrJyxcclxuICAgICAgICAnX19FTkRfXycsXHJcbiAgICAgICAgJ2Vsc2lmJyxcclxuICAgICAgICAnbHQnLFxyXG4gICAgICAgICdfX0ZJTEVfXycsXHJcbiAgICAgICAgJ2VxJyxcclxuICAgICAgICAnX19MSU5FX18nLFxyXG4gICAgICAgICdleHAnLFxyXG4gICAgICAgICduZScsXHJcbiAgICAgICAgJ3N1YicsXHJcbiAgICAgICAgJ19fUEFDS0FHRV9fJyxcclxuICAgICAgICAnZm9yJyxcclxuICAgICAgICAnbm8nLFxyXG4gICAgICAgICdhbmQnLFxyXG4gICAgICAgICdmb3JlYWNoJyxcclxuICAgICAgICAnb3InLFxyXG4gICAgICAgICd1bmxlc3MnLFxyXG4gICAgICAgICdjbXAnLFxyXG4gICAgICAgICdnZScsXHJcbiAgICAgICAgJ3BhY2thZ2UnLFxyXG4gICAgICAgICd1bnRpbCcsXHJcbiAgICAgICAgJ2NvbnRpbnVlJyxcclxuICAgICAgICAnZ3QnLFxyXG4gICAgICAgICd3aGlsZScsXHJcbiAgICAgICAgJ0NPUkUnLFxyXG4gICAgICAgICdpZicsXHJcbiAgICAgICAgJ3hvcicsXHJcbiAgICAgICAgJ2RvJyxcclxuICAgICAgICAnbGUnLFxyXG4gICAgICAgICdfX0RJRV9fJyxcclxuICAgICAgICAnX19XQVJOX18nLFxyXG4gICAgXSxcclxuICAgIC8vIFBlcmwgZnVuY3Rpb25zXHJcbiAgICBidWlsdGluRnVuY3Rpb25zOiBbXHJcbiAgICAgICAgJy1BJyxcclxuICAgICAgICAnRU5EJyxcclxuICAgICAgICAnbGVuZ3RoJyxcclxuICAgICAgICAnc2V0cGdycCcsXHJcbiAgICAgICAgJy1CJyxcclxuICAgICAgICAnZW5kZ3JlbnQnLFxyXG4gICAgICAgICdsaW5rJyxcclxuICAgICAgICAnc2V0cHJpb3JpdHknLFxyXG4gICAgICAgICctYicsXHJcbiAgICAgICAgJ2VuZGhvc3RlbnQnLFxyXG4gICAgICAgICdsaXN0ZW4nLFxyXG4gICAgICAgICdzZXRwcm90b2VudCcsXHJcbiAgICAgICAgJy1DJyxcclxuICAgICAgICAnZW5kbmV0ZW50JyxcclxuICAgICAgICAnbG9jYWwnLFxyXG4gICAgICAgICdzZXRwd2VudCcsXHJcbiAgICAgICAgJy1jJyxcclxuICAgICAgICAnZW5kcHJvdG9lbnQnLFxyXG4gICAgICAgICdsb2NhbHRpbWUnLFxyXG4gICAgICAgICdzZXRzZXJ2ZW50JyxcclxuICAgICAgICAnLWQnLFxyXG4gICAgICAgICdlbmRwd2VudCcsXHJcbiAgICAgICAgJ2xvZycsXHJcbiAgICAgICAgJ3NldHNvY2tvcHQnLFxyXG4gICAgICAgICctZScsXHJcbiAgICAgICAgJ2VuZHNlcnZlbnQnLFxyXG4gICAgICAgICdsc3RhdCcsXHJcbiAgICAgICAgJ3NoaWZ0JyxcclxuICAgICAgICAnLWYnLFxyXG4gICAgICAgICdlb2YnLFxyXG4gICAgICAgICdtYXAnLFxyXG4gICAgICAgICdzaG1jdGwnLFxyXG4gICAgICAgICctZycsXHJcbiAgICAgICAgJ2V2YWwnLFxyXG4gICAgICAgICdta2RpcicsXHJcbiAgICAgICAgJ3NobWdldCcsXHJcbiAgICAgICAgJy1rJyxcclxuICAgICAgICAnZXhlYycsXHJcbiAgICAgICAgJ21zZ2N0bCcsXHJcbiAgICAgICAgJ3NobXJlYWQnLFxyXG4gICAgICAgICctbCcsXHJcbiAgICAgICAgJ2V4aXN0cycsXHJcbiAgICAgICAgJ21zZ2dldCcsXHJcbiAgICAgICAgJ3NobXdyaXRlJyxcclxuICAgICAgICAnLU0nLFxyXG4gICAgICAgICdleGl0JyxcclxuICAgICAgICAnbXNncmN2JyxcclxuICAgICAgICAnc2h1dGRvd24nLFxyXG4gICAgICAgICctTycsXHJcbiAgICAgICAgJ2ZjbnRsJyxcclxuICAgICAgICAnbXNnc25kJyxcclxuICAgICAgICAnc2luJyxcclxuICAgICAgICAnLW8nLFxyXG4gICAgICAgICdmaWxlbm8nLFxyXG4gICAgICAgICdteScsXHJcbiAgICAgICAgJ3NsZWVwJyxcclxuICAgICAgICAnLXAnLFxyXG4gICAgICAgICdmbG9jaycsXHJcbiAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICdzb2NrZXQnLFxyXG4gICAgICAgICctcicsXHJcbiAgICAgICAgJ2ZvcmsnLFxyXG4gICAgICAgICdub3QnLFxyXG4gICAgICAgICdzb2NrZXRwYWlyJyxcclxuICAgICAgICAnLVInLFxyXG4gICAgICAgICdmb3JtYXQnLFxyXG4gICAgICAgICdvY3QnLFxyXG4gICAgICAgICdzb3J0JyxcclxuICAgICAgICAnLVMnLFxyXG4gICAgICAgICdmb3JtbGluZScsXHJcbiAgICAgICAgJ29wZW4nLFxyXG4gICAgICAgICdzcGxpY2UnLFxyXG4gICAgICAgICctcycsXHJcbiAgICAgICAgJ2dldGMnLFxyXG4gICAgICAgICdvcGVuZGlyJyxcclxuICAgICAgICAnc3BsaXQnLFxyXG4gICAgICAgICctVCcsXHJcbiAgICAgICAgJ2dldGdyZW50JyxcclxuICAgICAgICAnb3JkJyxcclxuICAgICAgICAnc3ByaW50ZicsXHJcbiAgICAgICAgJy10JyxcclxuICAgICAgICAnZ2V0Z3JnaWQnLFxyXG4gICAgICAgICdvdXInLFxyXG4gICAgICAgICdzcXJ0JyxcclxuICAgICAgICAnLXUnLFxyXG4gICAgICAgICdnZXRncm5hbScsXHJcbiAgICAgICAgJ3BhY2snLFxyXG4gICAgICAgICdzcmFuZCcsXHJcbiAgICAgICAgJy13JyxcclxuICAgICAgICAnZ2V0aG9zdGJ5YWRkcicsXHJcbiAgICAgICAgJ3BpcGUnLFxyXG4gICAgICAgICdzdGF0JyxcclxuICAgICAgICAnLVcnLFxyXG4gICAgICAgICdnZXRob3N0YnluYW1lJyxcclxuICAgICAgICAncG9wJyxcclxuICAgICAgICAnc3RhdGUnLFxyXG4gICAgICAgICctWCcsXHJcbiAgICAgICAgJ2dldGhvc3RlbnQnLFxyXG4gICAgICAgICdwb3MnLFxyXG4gICAgICAgICdzdHVkeScsXHJcbiAgICAgICAgJy14JyxcclxuICAgICAgICAnZ2V0bG9naW4nLFxyXG4gICAgICAgICdwcmludCcsXHJcbiAgICAgICAgJ3N1YnN0cicsXHJcbiAgICAgICAgJy16JyxcclxuICAgICAgICAnZ2V0bmV0YnlhZGRyJyxcclxuICAgICAgICAncHJpbnRmJyxcclxuICAgICAgICAnc3ltbGluaycsXHJcbiAgICAgICAgJ2FicycsXHJcbiAgICAgICAgJ2dldG5ldGJ5bmFtZScsXHJcbiAgICAgICAgJ3Byb3RvdHlwZScsXHJcbiAgICAgICAgJ3N5c2NhbGwnLFxyXG4gICAgICAgICdhY2NlcHQnLFxyXG4gICAgICAgICdnZXRuZXRlbnQnLFxyXG4gICAgICAgICdwdXNoJyxcclxuICAgICAgICAnc3lzb3BlbicsXHJcbiAgICAgICAgJ2FsYXJtJyxcclxuICAgICAgICAnZ2V0cGVlcm5hbWUnLFxyXG4gICAgICAgICdxdW90ZW1ldGEnLFxyXG4gICAgICAgICdzeXNyZWFkJyxcclxuICAgICAgICAnYXRhbjInLFxyXG4gICAgICAgICdnZXRwZ3JwJyxcclxuICAgICAgICAncmFuZCcsXHJcbiAgICAgICAgJ3N5c3NlZWsnLFxyXG4gICAgICAgICdBVVRPTE9BRCcsXHJcbiAgICAgICAgJ2dldHBwaWQnLFxyXG4gICAgICAgICdyZWFkJyxcclxuICAgICAgICAnc3lzdGVtJyxcclxuICAgICAgICAnQkVHSU4nLFxyXG4gICAgICAgICdnZXRwcmlvcml0eScsXHJcbiAgICAgICAgJ3JlYWRkaXInLFxyXG4gICAgICAgICdzeXN3cml0ZScsXHJcbiAgICAgICAgJ2JpbmQnLFxyXG4gICAgICAgICdnZXRwcm90b2J5bmFtZScsXHJcbiAgICAgICAgJ3JlYWRsaW5lJyxcclxuICAgICAgICAndGVsbCcsXHJcbiAgICAgICAgJ2Jpbm1vZGUnLFxyXG4gICAgICAgICdnZXRwcm90b2J5bnVtYmVyJyxcclxuICAgICAgICAncmVhZGxpbmsnLFxyXG4gICAgICAgICd0ZWxsZGlyJyxcclxuICAgICAgICAnYmxlc3MnLFxyXG4gICAgICAgICdnZXRwcm90b2VudCcsXHJcbiAgICAgICAgJ3JlYWRwaXBlJyxcclxuICAgICAgICAndGllJyxcclxuICAgICAgICAnYnJlYWsnLFxyXG4gICAgICAgICdnZXRwd2VudCcsXHJcbiAgICAgICAgJ3JlY3YnLFxyXG4gICAgICAgICd0aWVkJyxcclxuICAgICAgICAnY2FsbGVyJyxcclxuICAgICAgICAnZ2V0cHduYW0nLFxyXG4gICAgICAgICdyZWRvJyxcclxuICAgICAgICAndGltZScsXHJcbiAgICAgICAgJ2NoZGlyJyxcclxuICAgICAgICAnZ2V0cHd1aWQnLFxyXG4gICAgICAgICdyZWYnLFxyXG4gICAgICAgICd0aW1lcycsXHJcbiAgICAgICAgJ0NIRUNLJyxcclxuICAgICAgICAnZ2V0c2VydmJ5bmFtZScsXHJcbiAgICAgICAgJ3JlbmFtZScsXHJcbiAgICAgICAgJ3RydW5jYXRlJyxcclxuICAgICAgICAnY2htb2QnLFxyXG4gICAgICAgICdnZXRzZXJ2Ynlwb3J0JyxcclxuICAgICAgICAncmVxdWlyZScsXHJcbiAgICAgICAgJ3VjJyxcclxuICAgICAgICAnY2hvbXAnLFxyXG4gICAgICAgICdnZXRzZXJ2ZW50JyxcclxuICAgICAgICAncmVzZXQnLFxyXG4gICAgICAgICd1Y2ZpcnN0JyxcclxuICAgICAgICAnY2hvcCcsXHJcbiAgICAgICAgJ2dldHNvY2tuYW1lJyxcclxuICAgICAgICAncmV0dXJuJyxcclxuICAgICAgICAndW1hc2snLFxyXG4gICAgICAgICdjaG93bicsXHJcbiAgICAgICAgJ2dldHNvY2tvcHQnLFxyXG4gICAgICAgICdyZXZlcnNlJyxcclxuICAgICAgICAndW5kZWYnLFxyXG4gICAgICAgICdjaHInLFxyXG4gICAgICAgICdnbG9iJyxcclxuICAgICAgICAncmV3aW5kZGlyJyxcclxuICAgICAgICAnVU5JVENIRUNLJyxcclxuICAgICAgICAnY2hyb290JyxcclxuICAgICAgICAnZ210aW1lJyxcclxuICAgICAgICAncmluZGV4JyxcclxuICAgICAgICAndW5saW5rJyxcclxuICAgICAgICAnY2xvc2UnLFxyXG4gICAgICAgICdnb3RvJyxcclxuICAgICAgICAncm1kaXInLFxyXG4gICAgICAgICd1bnBhY2snLFxyXG4gICAgICAgICdjbG9zZWRpcicsXHJcbiAgICAgICAgJ2dyZXAnLFxyXG4gICAgICAgICdzYXknLFxyXG4gICAgICAgICd1bnNoaWZ0JyxcclxuICAgICAgICAnY29ubmVjdCcsXHJcbiAgICAgICAgJ2hleCcsXHJcbiAgICAgICAgJ3NjYWxhcicsXHJcbiAgICAgICAgJ3VudGllJyxcclxuICAgICAgICAnY29zJyxcclxuICAgICAgICAnaW5kZXgnLFxyXG4gICAgICAgICdzZWVrJyxcclxuICAgICAgICAndXNlJyxcclxuICAgICAgICAnY3J5cHQnLFxyXG4gICAgICAgICdJTklUJyxcclxuICAgICAgICAnc2Vla2RpcicsXHJcbiAgICAgICAgJ3V0aW1lJyxcclxuICAgICAgICAnZGJtY2xvc2UnLFxyXG4gICAgICAgICdpbnQnLFxyXG4gICAgICAgICdzZWxlY3QnLFxyXG4gICAgICAgICd2YWx1ZXMnLFxyXG4gICAgICAgICdkYm1vcGVuJyxcclxuICAgICAgICAnaW9jdGwnLFxyXG4gICAgICAgICdzZW1jdGwnLFxyXG4gICAgICAgICd2ZWMnLFxyXG4gICAgICAgICdkZWZpbmVkJyxcclxuICAgICAgICAnam9pbicsXHJcbiAgICAgICAgJ3NlbWdldCcsXHJcbiAgICAgICAgJ3dhaXQnLFxyXG4gICAgICAgICdkZWxldGUnLFxyXG4gICAgICAgICdrZXlzJyxcclxuICAgICAgICAnc2Vtb3AnLFxyXG4gICAgICAgICd3YWl0cGlkJyxcclxuICAgICAgICAnREVTVFJPWScsXHJcbiAgICAgICAgJ2tpbGwnLFxyXG4gICAgICAgICdzZW5kJyxcclxuICAgICAgICAnd2FudGFycmF5JyxcclxuICAgICAgICAnZGllJyxcclxuICAgICAgICAnbGFzdCcsXHJcbiAgICAgICAgJ3NldGdyZW50JyxcclxuICAgICAgICAnd2FybicsXHJcbiAgICAgICAgJ2R1bXAnLFxyXG4gICAgICAgICdsYycsXHJcbiAgICAgICAgJ3NldGhvc3RlbnQnLFxyXG4gICAgICAgICd3cml0ZScsXHJcbiAgICAgICAgJ2VhY2gnLFxyXG4gICAgICAgICdsY2ZpcnN0JyxcclxuICAgICAgICAnc2V0bmV0ZW50JyxcclxuICAgIF0sXHJcbiAgICAvLyBGaWxlIGhhbmRsZXJzXHJcbiAgICBidWlsdGluRmlsZUhhbmRsZXJzOiBbJ0FSR1YnLCAnU1RERVJSJywgJ1NURE9VVCcsICdBUkdWT1VUJywgJ1NURElOJywgJ0VOViddLFxyXG4gICAgLy8gUGVybCB2YXJpYWJsZXNcclxuICAgIGJ1aWx0aW5WYXJpYWJsZXM6IFtcclxuICAgICAgICAnJCEnLFxyXG4gICAgICAgICckXlJFX1RSSUVfTUFYQlVGJyxcclxuICAgICAgICAnJExBU1RfUkVHRVhQX0NPREVfUkVTVUxUJyxcclxuICAgICAgICAnJFwiJyxcclxuICAgICAgICAnJF5TJyxcclxuICAgICAgICAnJExJU1RfU0VQQVJBVE9SJyxcclxuICAgICAgICAnJCMnLFxyXG4gICAgICAgICckXlQnLFxyXG4gICAgICAgICckTUFUQ0gnLFxyXG4gICAgICAgICckJCcsXHJcbiAgICAgICAgJyReVEFJTlQnLFxyXG4gICAgICAgICckTVVMVElMSU5FX01BVENISU5HJyxcclxuICAgICAgICAnJCUnLFxyXG4gICAgICAgICckXlVOSUNPREUnLFxyXG4gICAgICAgICckTlInLFxyXG4gICAgICAgICckJicsXHJcbiAgICAgICAgJyReVVRGOExPQ0FMRScsXHJcbiAgICAgICAgJyRPRk1UJyxcclxuICAgICAgICBcIiQnXCIsXHJcbiAgICAgICAgJyReVicsXHJcbiAgICAgICAgJyRPRlMnLFxyXG4gICAgICAgICckKCcsXHJcbiAgICAgICAgJyReVycsXHJcbiAgICAgICAgJyRPUlMnLFxyXG4gICAgICAgICckKScsXHJcbiAgICAgICAgJyReV0FSTklOR19CSVRTJyxcclxuICAgICAgICAnJE9TX0VSUk9SJyxcclxuICAgICAgICAnJConLFxyXG4gICAgICAgICckXldJREVfU1lTVEVNX0NBTExTJyxcclxuICAgICAgICAnJE9TTkFNRScsXHJcbiAgICAgICAgJyQrJyxcclxuICAgICAgICAnJF5YJyxcclxuICAgICAgICAnJE9VVFBVVF9BVVRPX0ZMVVNIJyxcclxuICAgICAgICAnJCwnLFxyXG4gICAgICAgICckXycsXHJcbiAgICAgICAgJyRPVVRQVVRfRklFTERfU0VQQVJBVE9SJyxcclxuICAgICAgICAnJC0nLFxyXG4gICAgICAgICckYCcsXHJcbiAgICAgICAgJyRPVVRQVVRfUkVDT1JEX1NFUEFSQVRPUicsXHJcbiAgICAgICAgJyQuJyxcclxuICAgICAgICAnJGEnLFxyXG4gICAgICAgICckUEVSTF9WRVJTSU9OJyxcclxuICAgICAgICAnJC8nLFxyXG4gICAgICAgICckQUNDVU1VTEFUT1InLFxyXG4gICAgICAgICckUEVSTERCJyxcclxuICAgICAgICAnJDAnLFxyXG4gICAgICAgICckQVJHJyxcclxuICAgICAgICAnJFBJRCcsXHJcbiAgICAgICAgJyQ6JyxcclxuICAgICAgICAnJEFSR1YnLFxyXG4gICAgICAgICckUE9TVE1BVENIJyxcclxuICAgICAgICAnJDsnLFxyXG4gICAgICAgICckYicsXHJcbiAgICAgICAgJyRQUkVNQVRDSCcsXHJcbiAgICAgICAgJyQ8JyxcclxuICAgICAgICAnJEJBU0VUSU1FJyxcclxuICAgICAgICAnJFBST0NFU1NfSUQnLFxyXG4gICAgICAgICckPScsXHJcbiAgICAgICAgJyRDSElMRF9FUlJPUicsXHJcbiAgICAgICAgJyRQUk9HUkFNX05BTUUnLFxyXG4gICAgICAgICckPicsXHJcbiAgICAgICAgJyRDT01QSUxJTkcnLFxyXG4gICAgICAgICckUkVBTF9HUk9VUF9JRCcsXHJcbiAgICAgICAgJyQ/JyxcclxuICAgICAgICAnJERFQlVHR0lORycsXHJcbiAgICAgICAgJyRSRUFMX1VTRVJfSUQnLFxyXG4gICAgICAgICckQCcsXHJcbiAgICAgICAgJyRFRkZFQ1RJVkVfR1JPVVBfSUQnLFxyXG4gICAgICAgICckUlMnLFxyXG4gICAgICAgICckWycsXHJcbiAgICAgICAgJyRFRkZFQ1RJVkVfVVNFUl9JRCcsXHJcbiAgICAgICAgJyRTVUJTQ1JJUFRfU0VQQVJBVE9SJyxcclxuICAgICAgICAnJFxcXFwnLFxyXG4gICAgICAgICckRUdJRCcsXHJcbiAgICAgICAgJyRTVUJTRVAnLFxyXG4gICAgICAgICckXScsXHJcbiAgICAgICAgJyRFUlJOTycsXHJcbiAgICAgICAgJyRTWVNURU1fRkRfTUFYJyxcclxuICAgICAgICAnJF4nLFxyXG4gICAgICAgICckRVVJRCcsXHJcbiAgICAgICAgJyRVSUQnLFxyXG4gICAgICAgICckXkEnLFxyXG4gICAgICAgICckRVZBTF9FUlJPUicsXHJcbiAgICAgICAgJyRXQVJOSU5HJyxcclxuICAgICAgICAnJF5DJyxcclxuICAgICAgICAnJEVYQ0VQVElPTlNfQkVJTkdfQ0FVR0hUJyxcclxuICAgICAgICAnJHwnLFxyXG4gICAgICAgICckXkNISUxEX0VSUk9SX05BVElWRScsXHJcbiAgICAgICAgJyRFWEVDVVRBQkxFX05BTUUnLFxyXG4gICAgICAgICckficsXHJcbiAgICAgICAgJyReRCcsXHJcbiAgICAgICAgJyRFWFRFTkRFRF9PU19FUlJPUicsXHJcbiAgICAgICAgJyUhJyxcclxuICAgICAgICAnJF5FJyxcclxuICAgICAgICAnJEZPUk1BVF9GT1JNRkVFRCcsXHJcbiAgICAgICAgJyVeSCcsXHJcbiAgICAgICAgJyReRU5DT0RJTkcnLFxyXG4gICAgICAgICckRk9STUFUX0xJTkVfQlJFQUtfQ0hBUkFDVEVSUycsXHJcbiAgICAgICAgJyVFTlYnLFxyXG4gICAgICAgICckXkYnLFxyXG4gICAgICAgICckRk9STUFUX0xJTkVTX0xFRlQnLFxyXG4gICAgICAgICclSU5DJyxcclxuICAgICAgICAnJF5IJyxcclxuICAgICAgICAnJEZPUk1BVF9MSU5FU19QRVJfUEFHRScsXHJcbiAgICAgICAgJyVPVkVSTE9BRCcsXHJcbiAgICAgICAgJyReSScsXHJcbiAgICAgICAgJyRGT1JNQVRfTkFNRScsXHJcbiAgICAgICAgJyVTSUcnLFxyXG4gICAgICAgICckXkwnLFxyXG4gICAgICAgICckRk9STUFUX1BBR0VfTlVNQkVSJyxcclxuICAgICAgICAnQCsnLFxyXG4gICAgICAgICckXk0nLFxyXG4gICAgICAgICckRk9STUFUX1RPUF9OQU1FJyxcclxuICAgICAgICAnQC0nLFxyXG4gICAgICAgICckXk4nLFxyXG4gICAgICAgICckR0lEJyxcclxuICAgICAgICAnQF8nLFxyXG4gICAgICAgICckXk8nLFxyXG4gICAgICAgICckSU5QTEFDRV9FRElUJyxcclxuICAgICAgICAnQEFSR1YnLFxyXG4gICAgICAgICckXk9QRU4nLFxyXG4gICAgICAgICckSU5QVVRfTElORV9OVU1CRVInLFxyXG4gICAgICAgICdASU5DJyxcclxuICAgICAgICAnJF5QJyxcclxuICAgICAgICAnJElOUFVUX1JFQ09SRF9TRVBBUkFUT1InLFxyXG4gICAgICAgICdATEFTVF9NQVRDSF9TVEFSVCcsXHJcbiAgICAgICAgJyReUicsXHJcbiAgICAgICAgJyRMQVNUX01BVENIX0VORCcsXHJcbiAgICAgICAgJyReUkVfREVCVUdfRkxBR1MnLFxyXG4gICAgICAgICckTEFTVF9QQVJFTl9NQVRDSCcsXHJcbiAgICBdLFxyXG4gICAgLy8gb3BlcmF0b3JzXHJcbiAgICBzeW1ib2xzOiAvWzorXFwtXFxeKiQmJUA9PD4hP3xcXC9+XFwuXS8sXHJcbiAgICBxdW90ZUxpa2VPcHM6IFsncXInLCAnbScsICdzJywgJ3EnLCAncXEnLCAncXgnLCAncXcnLCAndHInLCAneSddLFxyXG4gICAgZXNjYXBlczogL1xcXFwoPzpbYWJmbnJ0dlxcXFxcIiddfHhbMC05QS1GYS1mXXsxLDR9fHVbMC05QS1GYS1mXXs0fXxVWzAtOUEtRmEtZl17OH0pLyxcclxuICAgIC8vIFRoZSBtYWluIHRva2VuaXplciBmb3Igb3VyIGxhbmd1YWdlc1xyXG4gICAgdG9rZW5pemVyOiB7XHJcbiAgICAgICAgcm9vdDogW1xyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAd2hpdGVzcGFjZScgfSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgL1thLXpBLVpcXC1fXVtcXHdcXC1fXSovLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAa2V5d29yZHMnOiAna2V5d29yZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAYnVpbHRpbkZ1bmN0aW9ucyc6ICd0eXBlLmlkZW50aWZpZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGJ1aWx0aW5GaWxlSGFuZGxlcnMnOiAndmFyaWFibGUucHJlZGVmaW5lZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAcXVvdGVMaWtlT3BzJzogeyB0b2tlbjogJ0ByZW1hdGNoJywgbmV4dDogJ3F1b3RlZENvbnN0cnVjdHMnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAvLyBQZXJsIHZhcmlhYmxlc1xyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvW1xcJEAlXVsqQCM/XFwrXFwtXFwkIVxcd1xcXFxcXF4+PH46O1xcLl0rLyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGJ1aWx0aW5WYXJpYWJsZXMnOiAndmFyaWFibGUucHJlZGVmaW5lZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICd2YXJpYWJsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BzdHJpbmdzJyB9LFxyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAZGJsU3RyaW5ncycgfSxcclxuICAgICAgICAgICAgLy8gUGVybCBEb2NcclxuICAgICAgICAgICAgeyBpbmNsdWRlOiAnQHBlcmxkb2MnIH0sXHJcbiAgICAgICAgICAgIC8vIEhlcmUgRG9jXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BoZXJlZG9jJyB9LFxyXG4gICAgICAgICAgICBbL1t7fVxcW1xcXSgpXS8sICdAYnJhY2tldHMnXSxcclxuICAgICAgICAgICAgLy8gUmVnRXhwXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIC9bXFwvXSg/Oig/OlxcWyg/OlxcXFxdfFteXFxdXSkrXFxdKXwoPzpcXFxcXFwvfFteXFxdXFwvXSkpKltcXC9dXFx3KlxccyooPz1bKS4sO118JCkvLFxyXG4gICAgICAgICAgICAgICAgJ3JlZ2V4cCcsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFsvQHN5bWJvbHMvLCAnb3BlcmF0b3JzJ10sXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0BudW1iZXJzJyB9LFxyXG4gICAgICAgICAgICBbL1ssO10vLCAnZGVsaW1pdGVyJ10sXHJcbiAgICAgICAgXSxcclxuICAgICAgICB3aGl0ZXNwYWNlOiBbXHJcbiAgICAgICAgICAgIFsvXFxzKy8sICd3aGl0ZSddLFxyXG4gICAgICAgICAgICBbLyheIyEuKiQpLywgJ21ldGF0YWcnXSxcclxuICAgICAgICAgICAgWy8oXiMuKiQpLywgJ2NvbW1lbnQnXSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIG51bWJlcnM6IFtcclxuICAgICAgICAgICAgWy9cXGQqXFwuXFxkKyhbZUVdW1xcLStdP1xcZCspPy8sICdudW1iZXIuZmxvYXQnXSxcclxuICAgICAgICAgICAgWy8wW3hYXVswLTlhLWZBLUZfXSpbMC05YS1mQS1GXS8sICdudW1iZXIuaGV4J10sXHJcbiAgICAgICAgICAgIFsvXFxkKy8sICdudW1iZXInXSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIFNpbmdsZSBxdW90ZSBzdHJpbmdcclxuICAgICAgICBzdHJpbmdzOiBbWy8nLywgJ3N0cmluZycsICdAc3RyaW5nQm9keSddXSxcclxuICAgICAgICBzdHJpbmdCb2R5OiBbXHJcbiAgICAgICAgICAgIFsvJy8sICdzdHJpbmcnLCAnQHBvcGFsbCddLFxyXG4gICAgICAgICAgICBbL1xcXFwnLywgJ3N0cmluZy5lc2NhcGUnXSxcclxuICAgICAgICAgICAgWy8uLywgJ3N0cmluZyddLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gRG91YmxlIHF1b3RlIHN0cmluZ1xyXG4gICAgICAgIGRibFN0cmluZ3M6IFtbL1wiLywgJ3N0cmluZycsICdAZGJsU3RyaW5nQm9keSddXSxcclxuICAgICAgICBkYmxTdHJpbmdCb2R5OiBbXHJcbiAgICAgICAgICAgIFsvXCIvLCAnc3RyaW5nJywgJ0Bwb3BhbGwnXSxcclxuICAgICAgICAgICAgWy9AZXNjYXBlcy8sICdzdHJpbmcuZXNjYXBlJ10sXHJcbiAgICAgICAgICAgIFsvXFxcXC4vLCAnc3RyaW5nLmVzY2FwZS5pbnZhbGlkJ10sXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B2YXJpYWJsZXMnIH0sXHJcbiAgICAgICAgICAgIFsvLi8sICdzdHJpbmcnXSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIFF1b3RlZCBjb25zdHJ1Y3RzXHJcbiAgICAgICAgLy8gUGVyY2VudCBzdHJpbmdzIGluIFJ1YnkgYXJlIHNpbWlsYXIgdG8gcXVvdGUtbGlrZSBvcGVyYXRvcnMgaW4gUGVybC5cclxuICAgICAgICAvLyBUaGlzIGlzIGFkYXB0ZWQgZnJvbSBwc3RyaW5ncyBpbiAuLi9ydWJ5L3J1YnkudHMuXHJcbiAgICAgICAgcXVvdGVkQ29uc3RydWN0czogW1xyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpXFxzKlxcKC8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0Bxc3RyaW5nLiguKScgfV0sXHJcbiAgICAgICAgICAgIFsvKHF8cXd8dHJ8eSlcXHMqXFxbLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFzdHJpbmcuWy5dJyB9XSxcclxuICAgICAgICAgICAgWy8ocXxxd3x0cnx5KVxccypcXHsvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXN0cmluZy57Ln0nIH1dLFxyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpXFxzKjwvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXN0cmluZy48Lj4nIH1dLFxyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpIy8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0Bxc3RyaW5nLiMuIycgfV0sXHJcbiAgICAgICAgICAgIFsvKHF8cXd8dHJ8eSlcXHMqKFteQS1aYS16MC05I1xcc10pLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFzdHJpbmcuJDIuJDInIH1dLFxyXG4gICAgICAgICAgICBbLyhxfHF3fHRyfHkpXFxzKyhcXHcpLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFzdHJpbmcuJDIuJDInIH1dLFxyXG4gICAgICAgICAgICBbLyhxcnxtfHMpXFxzKlxcKC8sIHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcmVnZXhwLiguKScgfV0sXHJcbiAgICAgICAgICAgIFsvKHFyfG18cylcXHMqXFxbLywgeyB0b2tlbjogJ3JlZ2V4cC5kZWxpbScsIHN3aXRjaFRvOiAnQHFyZWdleHAuWy5dJyB9XSxcclxuICAgICAgICAgICAgWy8ocXJ8bXxzKVxccypcXHsvLCB7IHRva2VuOiAncmVnZXhwLmRlbGltJywgc3dpdGNoVG86ICdAcXJlZ2V4cC57Ln0nIH1dLFxyXG4gICAgICAgICAgICBbLyhxcnxtfHMpXFxzKjwvLCB7IHRva2VuOiAncmVnZXhwLmRlbGltJywgc3dpdGNoVG86ICdAcXJlZ2V4cC48Lj4nIH1dLFxyXG4gICAgICAgICAgICBbLyhxcnxtfHMpIy8sIHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcmVnZXhwLiMuIycgfV0sXHJcbiAgICAgICAgICAgIFsvKHFyfG18cylcXHMqKFteQS1aYS16MC05XyNcXHNdKS8sIHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcmVnZXhwLiQyLiQyJyB9XSxcclxuICAgICAgICAgICAgWy8ocXJ8bXxzKVxccysoXFx3KS8sIHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcmVnZXhwLiQyLiQyJyB9XSxcclxuICAgICAgICAgICAgWy8ocXF8cXgpXFxzKlxcKC8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcXN0cmluZy4oLiknIH1dLFxyXG4gICAgICAgICAgICBbLyhxcXxxeClcXHMqXFxbLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFxc3RyaW5nLlsuXScgfV0sXHJcbiAgICAgICAgICAgIFsvKHFxfHF4KVxccypcXHsvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXFzdHJpbmcuey59JyB9XSxcclxuICAgICAgICAgICAgWy8ocXF8cXgpXFxzKjwvLCB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgc3dpdGNoVG86ICdAcXFzdHJpbmcuPC4+JyB9XSxcclxuICAgICAgICAgICAgWy8ocXF8cXgpIy8sIHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBzd2l0Y2hUbzogJ0BxcXN0cmluZy4jLiMnIH1dLFxyXG4gICAgICAgICAgICBbLyhxcXxxeClcXHMqKFteQS1aYS16MC05I1xcc10pLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFxc3RyaW5nLiQyLiQyJyB9XSxcclxuICAgICAgICAgICAgWy8ocXF8cXgpXFxzKyhcXHcpLywgeyB0b2tlbjogJ3N0cmluZy5kZWxpbScsIHN3aXRjaFRvOiAnQHFxc3RyaW5nLiQyLiQyJyB9XSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIE5vbi1leHBhbmRlZCBxdW90ZWQgc3RyaW5nXHJcbiAgICAgICAgLy8gcXN0cmluZzxvcGVuPi48Y2xvc2U+XHJcbiAgICAgICAgLy8gIG9wZW4gPSBvcGVuIGRlbGltaXRlclxyXG4gICAgICAgIC8vICBjbG9zZSA9IGNsb3NlIGRlbGltaXRlclxyXG4gICAgICAgIHFzdHJpbmc6IFtcclxuICAgICAgICAgICAgWy9cXFxcLi8sICdzdHJpbmcuZXNjYXBlJ10sXHJcbiAgICAgICAgICAgIFsvLi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJCM9PSRTMyc6IHsgdG9rZW46ICdzdHJpbmcuZGVsaW0nLCBuZXh0OiAnQHBvcCcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyQjPT0kUzInOiB7IHRva2VuOiAnc3RyaW5nLmRlbGltJywgbmV4dDogJ0BwdXNoJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gUXVvdGVkIHJlZ2V4cFxyXG4gICAgICAgIC8vIHFyZWdleHAuPG9wZW4+LjxjbG9zZT5cclxuICAgICAgICAvLyAgb3BlbiA9IG9wZW4gZGVsaW1pdGVyXHJcbiAgICAgICAgLy8gIGNsb3NlID0gY2xvc2UgZGVsaW1pdGVyXHJcbiAgICAgICAgcXJlZ2V4cDogW1xyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdAdmFyaWFibGVzJyB9LFxyXG4gICAgICAgICAgICBbL1xcXFwuLywgJ3JlZ2V4cC5lc2NhcGUnXSxcclxuICAgICAgICAgICAgWy8uLywge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICckIz09JFMzJzogeyB0b2tlbjogJ3JlZ2V4cC5kZWxpbScsIG5leHQ6ICdAcmVnZXhwTW9kaWZpZXJzJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJCM9PSRTMic6IHsgdG9rZW46ICdyZWdleHAuZGVsaW0nLCBuZXh0OiAnQHB1c2gnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6ICdyZWdleHAnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgXSxcclxuICAgICAgICByZWdleHBNb2RpZmllcnM6IFtcclxuICAgICAgICAgICAgWy9bbXNpeHBvZHVhbG5nY2VyXSsvLCB7IHRva2VuOiAncmVnZXhwLm1vZGlmaWVyJywgbmV4dDogJ0Bwb3BhbGwnIH1dLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gRXhwYW5kZWQgcXVvdGVkIHN0cmluZ1xyXG4gICAgICAgIC8vIHFxc3RyaW5nLjxvcGVuPi48Y2xvc2U+XHJcbiAgICAgICAgLy8gIG9wZW4gPSBvcGVuIGRlbGltaXRlclxyXG4gICAgICAgIC8vICBjbG9zZSA9IGNsb3NlIGRlbGltaXRlclxyXG4gICAgICAgIHFxc3RyaW5nOiBbXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0B2YXJpYWJsZXMnIH0sXHJcbiAgICAgICAgICAgIHsgaW5jbHVkZTogJ0Bxc3RyaW5nJyB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgaGVyZWRvYzogW1xyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAvPDxcXHMqWydcImBdPyhbXFx3XFwtXSspWydcImBdPy8sXHJcbiAgICAgICAgICAgICAgICB7IHRva2VuOiAnc3RyaW5nLmhlcmVkb2MuZGVsaW1pdGVyJywgbmV4dDogJ0BoZXJlZG9jQm9keS4kMScgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIGhlcmVkb2NCb2R5OiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIC9eKFtcXHdcXC1dKykkLyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnJDE9PSRTMic6IFt7IHRva2VuOiAnc3RyaW5nLmhlcmVkb2MuZGVsaW1pdGVyJywgbmV4dDogJ0Bwb3BhbGwnIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQGRlZmF1bHQnOiAnc3RyaW5nLmhlcmVkb2MnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbLy4vLCAnc3RyaW5nLmhlcmVkb2MnXSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIHBlcmxkb2M6IFtbL149XFx3LywgJ2NvbW1lbnQuZG9jJywgJ0BwZXJsZG9jQm9keSddXSxcclxuICAgICAgICBwZXJsZG9jQm9keTogW1xyXG4gICAgICAgICAgICBbL149Y3V0XFxiLywgJ3R5cGUuaWRlbnRpZmllcicsICdAcG9wYWxsJ10sXHJcbiAgICAgICAgICAgIFsvLi8sICdjb21tZW50LmRvYyddLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgdmFyaWFibGVzOiBbXHJcbiAgICAgICAgICAgIFsvXFwkXFx3Ky8sICd2YXJpYWJsZSddLFxyXG4gICAgICAgICAgICBbL0BcXHcrLywgJ3ZhcmlhYmxlJ10sXHJcbiAgICAgICAgICAgIFsvJVxcdysvLCAndmFyaWFibGUnXSxcclxuICAgICAgICBdLFxyXG4gICAgfSxcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==